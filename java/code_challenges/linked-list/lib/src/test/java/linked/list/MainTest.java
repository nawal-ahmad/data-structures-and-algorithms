/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package linked.list;

import linked.list.structure.SinglyLinkedList;
import org.checkerframework.common.value.qual.StringVal;
import org.junit.jupiter.api.Test;

import java.util.LinkedList;

import static org.junit.jupiter.api.Assertions.*;
class LibraryTest {
  @Test void linkedListTest (){
    SinglyLinkedList first = new SinglyLinkedList();
    // empty linked list
    assertEquals(first.size(),0);
    assertEquals("Null" , first.toString());

    // insert into the linked list
    first.insert("H");
    assertEquals(first.size(),1);

    assertTrue(first.includes("H"));
    // head point to the first node in the linked list
    assertEquals("{ H } -> Null" , first.toString());

    //Insert multiple nodes into the linked list
    first.insert("E");
    first.insert("L");
    first.insert("L");
    first.insert("O");
    assertEquals("{ O } -> { L } -> { L } -> { E } -> { H } -> Null" , first.toString());

    // return false when searching for a value in the linked list that does not exist
    assertFalse(first.includes("M"));
    //finding a value within the linked list that exists
    assertTrue(first.includes("L"));


    //return a collection of all the values that exist in the linked list
    assertEquals("{ O } -> { L } -> { L } -> { E } -> { H } -> Null" , first.toString());

  }
  @Test void appendTest (){
    SinglyLinkedList ll = new SinglyLinkedList();
    //Add a node to the end of the linked list
    assertEquals(0,ll.size());
    ll.append("Sleepy!");
    assertEquals(1,ll.size());
    System.out.println(ll);
  }

  @Test void multiAppendTest (){
    SinglyLinkedList ll = new SinglyLinkedList();
    //add multiple nodes to the end of a linked list
    assertEquals(0,ll.size());
    ll.append("A");
    ll.append("B");
    ll.append("C");
    assertEquals(3,ll.size());
    System.out.println(ll);
  }
  @Test void beforeInsertTest (){
    SinglyLinkedList ll = new SinglyLinkedList();
    // empty linked list
    assertEquals(0,ll.size());
    ll.append("10");
    ll.append("20");
    ll.append("40");
    System.out.println(ll);
    //insert a node before a node located i the middle of a linked list
    ll.insertBefore("40","5555");
    assertEquals(ll.size(),4);
    System.out.println(ll);

    // insert a node before the first node of a linked list
    ll.insertBefore("10","00");
    System.out.println(ll);
  }

  @Test void afterInsertTest (){
    SinglyLinkedList ll = new SinglyLinkedList();
    //insert a node before a node located i the middle of a linked list
    assertEquals(0,ll.size());
    ll.append("WW");
    ll.append("XX");
    ll.append("YY");
    ll.append("ZZ");
    //Insert after a node in the middle of the linked list
    ll.insertAfter("YY","55");
    assertEquals(5,ll.size());
    System.out.println(ll);
    //insert a node after the last node of the linked list
    ll.insertAfter("ZZ","00000");
    assertEquals(6,ll.size());
    System.out.println(ll);
  }
  @Test void kthFromEndTest() throws Exception {
    SinglyLinkedList ll = new SinglyLinkedList();
    ll.append("55");
    // Where the linked list is of a size 1
    assertEquals(ll.kthFromEnd(0), "55");
    ll.append("66");
    ll.append("77");
    //  Where k is greater than the length of the linked list
    assertThrows(IndexOutOfBoundsException.class,() -> ll.kthFromEnd(6));

    // Where k and the length of the list are the same
    assertEquals(ll.kthFromEnd(2),"55");

    // Where k is not a positive integer
    assertThrows(IndexOutOfBoundsException.class,() -> ll.kthFromEnd(-3));

    // “Happy Path” where k is not at the end, but somewhere in the middle of the linked list
    assertEquals(ll.kthFromEnd(1),"66");
  }

  @Test void zipListsTest(){
    SinglyLinkedList ll1= new SinglyLinkedList();
    SinglyLinkedList ll2= new SinglyLinkedList();
    SinglyLinkedList ll3= new SinglyLinkedList();
    SinglyLinkedList ll4 = new SinglyLinkedList();


    ll1.append("11");
    ll1.append("33");
    ll1.append("55");
    ll2.append("22");
    ll2.append("44");
    ll2.append("66");
    ll3 = SinglyLinkedList.zipLists(ll1,ll2);
    assertEquals(ll3.size(),6);
  }


  /*

  * */
}



